import os
import time
from dotenv import load_dotenv
import ccxt

# Load env variables
load_dotenv()

# Load tickers (comma separated in .env file: e.g. HL_TICKERS=ETH,BTC,SOL)
TICKERS = os.getenv("HL_TICKERS", "").split(",")
TICKERS = [t.strip() for t in TICKERS if t.strip()]

if not TICKERS:
    raise ValueError("No tickers found in HL_TICKERS env variable")

# Collect wallet credentials (HL_wallet_address1, HL_privatekey_1, etc.)
wallets = []
i = 1
while True:
    wallet = os.getenv(f"HL_wallet_address{i}")
    priv = os.getenv(f"HL_privatekey_{i}")
    if not wallet or not priv:
        break
    wallets.append({"address": wallet, "privateKey": priv})
    i += 1

if not wallets:
    raise ValueError("No wallets found in .env file")

print(f"Loaded {len(wallets)} wallets and {len(TICKERS)} tickers ✅")

# Initialize exchanges for each wallet
exchanges = []
for w in wallets:
    ex = ccxt.hyperliquid({
        "walletAddress": w["address"],
        "privateKey": w["privateKey"],
    })
    ex.set_sandbox_mode(True)  # ⚠️ Change to False for mainnet
    exchanges.append({"client": ex, "address": w["address"]})

# Cancel condition: 1 hour old
ONE_HOUR_MS = 60 * 60 * 1000

def check_and_cancel():
    now_ms = int(time.time() * 1000)

    for ex in exchanges:
        client = ex["client"]
        addr = ex["address"]
        print(f"\n🔎 Checking wallet {addr} ...")

        for ticker in TICKERS:
            symbol = f"{ticker}/USDC:USDC"  # perp format
            try:
                open_orders = client.fetch_open_orders(
                    symbol=symbol,
                    params={"user": addr}
                )

                for order in open_orders:
                    reduce_only = order.get("info", {}).get("reduceOnly", None)
                    timestamp = order.get("timestamp", 0)

                    # Cancel only if reduceOnly == False and order age > 1h
                    if reduce_only is False and timestamp and (now_ms - timestamp) > ONE_HOUR_MS:
                        oid = order.get("id")
                        print(f"⚠️ Canceling order {oid} on {symbol} (age > 1h, reduceOnly=False)")
                        try:
                            resp = client.cancel_order(oid, symbol)
                            print("✅ Canceled:", resp)
                        except Exception as ce:
                            print("❌ Cancel error:", ce)

            except Exception as e:
                print(f"Error fetching orders for {symbol}:", e)


# Run forever
while True:
    print("\n⏳ Running open orders check...")
    check_and_cancel()
    print("✅ Cycle complete. Sleeping 60 seconds...\n")
    time.sleep(60)


#nano .env content -> # Wallets
#HL_wallet_address1=0xYourWallet1
#HL_privatekey_1=yourprivatekey1
#HL_wallet_address2=0xYourWallet2
#HL_privatekey_2=yourprivatekey2
# add more in same format...

# Tickers to monitor
#HL_TICKERS=ETH,BTC,SOL
